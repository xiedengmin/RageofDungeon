在 C# 中，你需要配置 PostgreSQL 的连接字符串，并使用 SqlSugar 创建连接池。
csharp
using SqlSugar;

public class DatabaseHelper
{
    public SqlSugarClient db;

    public DatabaseHelper()
    {
        // PostgreSQL 连接字符串
        string connectionString = "Host=localhost;Port=5432;Database=your_database_name;Username=your_username;Password=your_password;";

        // 初始化 SqlSugarClient，连接池的配置
        db = new SqlSugarClient(new ConnectionConfig()
        {
            ConnectionString = connectionString,  // 数据库连接字符串
            DbType = DbType.PostgreSQL,  // 设置数据库类型为 PostgreSQL
            IsAutoCloseConnection = true,  // 自动关闭连接
            InitKeyType = InitKeyType.Attribute,  // 初始化方式
            MaxPoolSize = 10,  // 最大连接池大小（根据需要调整）
            MinPoolSize = 1,  // 最小连接池大小
        });
    }
}

步骤 3：增删查改操作（CRUD）

1. 查询操作（Select）

csharp
public void GetData()
{
    var data = db.Queryable<User>().Where(u => u.Age > 18).ToList();
    foreach (var user in data)
    {
        Console.WriteLine($"{user.Name} - {user.Age}");
    }
}

2. 插入操作（Insert）

csharp
public void InsertData()
{
    var newUser = new User
    {
        Name = "John",
        Age = 30
    };
    db.Insertable(newUser).ExecuteCommand();
}

3. 更新操作（Update）

csharp
public void UpdateData()
{
    var user = db.Queryable<User>().Where(u => u.Name == "John").First();
    if (user != null)
    {
        user.Age = 31;
        db.Updateable(user).ExecuteCommand();
    }
}

4. 删除操作（Delete）

csharp
public void DeleteData()
{
    db.Deleteable<User>().Where(u => u.Name == "John").ExecuteCommand();
}

步骤 4：定义数据模型（例如 User）

确保你定义了与 PostgreSQL 数据库表相对应的数据模型类。
csharp
public class User
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
}

总结

通过以上步骤，你就可以在 C# 中使用 SqlSugar ORM 实现 PostgreSQL 数据库的连接池管理，并执行增删查改操作。SqlSugar 提供了非常简便的 API 来进行操作，能够有效地提升开发效率。
需要注意的是，MaxPoolSize 和 MinPoolSize 配置连接池的大小，可以根据你的项目需求进行调整。